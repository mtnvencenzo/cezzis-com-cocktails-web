parameters:
- name: workingDirectory  # $(System.DefaultWorkingDiretory)/cocktails.frontend/cocktails.web
  type: string
- name: artifactName
  type: string
- name: branchType
  type: string
- name: dockerFileName
  type: string
- name: coverageArtifactName
  type: string

steps:
- task: NodeTool@0
  displayName: 'Install node'
  inputs:
    versionSpec: '23.5.x'

- script: |
    npm install -g yarn
  displayName: 'Install yarn'

- task: NpmAuthenticate@0
  displayName: 'Authenticate with azure artifacts'
  inputs:
    workingFile: '${{ parameters.workingDirectory }}/.npmrc'

- script: |
    yarn install
  displayName: 'Install dependencies'
  workingDirectory: ${{ parameters.workingDirectory }}

- script: |
    yarn lint
  displayName: 'UI run lint'
  workingDirectory: ${{ parameters.workingDirectory }}

- script: |
    yarn coverage
  displayName: 'UI run tests with coverage'
  workingDirectory: ${{ parameters.workingDirectory }}

- task: PublishTestResults@2
  displayName: 'Publish ui unit test results'
  condition: succeededOrFailed()
  inputs:
    testResultsFormat: 'JUnit'
    testResultsFiles: '${{ parameters.workingDirectory }}/../.coverage/junit-report.xml'
    mergeTestResults: True
    failTaskOnFailedTests: True
    testRunTitle: 'Cocktails.Ui'

- script: |
    find '${{ parameters.workingDirectory }}/../.coverage' -name 'cobertura-coverage.xml' -type f -execdir bash -c 'mkdir -p $(Build.ArtifactStagingDirectory)/code-coverage && mv "$1" $(Build.ArtifactStagingDirectory)/code-coverage/$(uuidgen).cobertura.${1##*.}' -- {} \;
  name: CopyCoverageFiles
  displayName: 'Copy test coverage files (cobertura)'

- script: |
    find "$(Build.ArtifactStagingDirectory)/code-coverage" -type f
  name: ListCoverageFiles
  displayName: "Listing code coverage files"

- script: |
    yarn build:prod
  displayName: 'UI run build'
  workingDirectory: ${{ parameters.workingDirectory }}

- task: CopyFiles@2
  displayName: 'UI copy build artifacts'
  inputs:
    SourceFolder: '${{ parameters.workingDirectory }}/dist'
    Contents: '**/*'
    TargetFolder: '$(Build.ArtifactStagingDirectory)/ui/dist'
    OverWrite: true

- task: CopyFiles@2
  displayName: 'UI copy .env'
  inputs:
    SourceFolder: '${{ parameters.workingDirectory }}/'
    Contents: '.env'
    TargetFolder: '$(Build.ArtifactStagingDirectory)/ui'
    OverWrite: true

- task: CopyFiles@2
  displayName: 'UI copy env.sh bash'
  inputs:
    SourceFolder: '${{ parameters.workingDirectory }}/'
    Contents: 'env.sh'
    TargetFolder: '$(Build.ArtifactStagingDirectory)/ui'
    OverWrite: true

- task: CopyFiles@2
  displayName: 'UI copy nginx-default.conf'
  inputs:
    SourceFolder: '${{ parameters.workingDirectory }}/'
    Contents: 'nginx-default.conf'
    TargetFolder: '$(Build.ArtifactStagingDirectory)/ui'
    OverWrite: true

- task: CopyFiles@2
  displayName: 'UI copy docker file'
  inputs:
    SourceFolder: '${{ parameters.workingDirectory }}/'
    Contents: '${{ parameters.dockerFileName }}'
    TargetFolder: '$(Build.ArtifactStagingDirectory)/ui'
    OverWrite: true

- task: PublishBuildArtifacts@1
  displayName: 'UI publish artifact'
  condition: and(not(or(failed(), canceled())), eq('${{ parameters.branchType }}', 'main'))
  inputs:
    PathToPublish: '$(Build.ArtifactStagingDirectory)/ui'
    ArtifactName: '${{ parameters.artifactName }}'

- task: PublishBuildArtifacts@1
  displayName: 'Code coverage publish artifact'
  condition: not(or(failed(), canceled()))
  inputs:
    PathToPublish: '$(Build.ArtifactStagingDirectory)/code-coverage'
    ArtifactName: '${{ parameters.coverageArtifactName }}'