parameters:
- name: url
  type: string
- name: branchType
  type: string
- name: authHeader
  type: string
- name: authValue
  type: string

steps:
  - download: none
  - checkout: none  #skip loading source in this job (not needed)

  - script: |
      echo '============= warming up =============='
      echo "GET ${{ parameters.url }}"
      echo "========================================================="

      max_retries=5
      retry_count=0

      while [ $retry_count -lt $max_retries ]; do

        if [ '${{ parameters.authHeader }}' != '' ]; then
          rs=$(curl -H "${{ parameters.authHeader }}: ${{ parameters.authValue }}" --write-out '%{http_code}' --silent -m 30 --output /dev/null ${{ parameters.url }})
        else
          rs=$(curl --write-out '%{http_code}' --silent -m 30 --output /dev/null ${{ parameters.url }})
        fi

        if [ $rs -eq 200 ]; then
          echo "Request was successful with status code $rs"
          exit 0
        else
          echo "Request failed with status code $rs. Retrying..."
          retry_count=$((retry_count + 1))
          sleep 2 # Wait for 2 seconds before retrying
        fi
      done

      if [ $retry_count -eq $max_retries ]; then
        echo "Request failed after $max_retries retries. Exiting."
      fi

      exit -1

    name: WarmingUp
    displayName: "Sending warmup request"
    condition: and(not(or(failed(), canceled())), eq('${{ parameters.branchType }}', 'main'))